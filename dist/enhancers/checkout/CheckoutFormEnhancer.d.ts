import { BaseEnhancer } from '../base/BaseEnhancer';
export declare class CheckoutFormEnhancer extends BaseEnhancer {
    private form;
    private apiClient;
    private countryService;
    private creditCardService?;
    private validator;
    private stateLoadingPromises;
    private ui;
    private prospectCartEnhancer?;
    private loadingOverlay;
    private expressProcessor?;
    private orderManager?;
    constructor(element: HTMLElement);
    private fields;
    private billingFields;
    private paymentButtons;
    private submitButton?;
    private countries;
    private countryConfigs;
    private currentCountryConfig?;
    private detectedCountryCode;
    private phoneInputs;
    private isIntlTelInputAvailable;
    private googleMapsLoaded;
    private googleMapsLoading;
    private googleMapsLoadPromise;
    private autocompleteInstances;
    private enableAutocomplete;
    private locationElements;
    private billingLocationElements;
    private locationFieldsShown;
    private billingLocationFieldsShown;
    private submitHandler?;
    private changeHandler?;
    private paymentMethodChangeHandler?;
    private shippingMethodChangeHandler?;
    private billingAddressToggleHandler?;
    private boundHandleTestDataFilled?;
    private boundHandleKonamiActivation?;
    private billingAnimationInProgress;
    private billingAnimationDebounceTimer?;
    private billingAnimationTimeouts;
    private hasTrackedShippingInfo;
    private hasTrackedBeginCheckout;
    initialize(): Promise<void>;
    private scanAllFields;
    private scanBillingFields;
    private scanExpirationFields;
    private populateExpirationFields;
    private setupBillingForm;
    private convertShippingFieldsToBilling;
    private setInitialBillingFormState;
    private expandBillingForm;
    private collapseBillingForm;
    private loadGoogleMapsAPI;
    private performGoogleMapsLoad;
    private isGoogleMapsLoaded;
    private isGoogleMapsPlacesAvailable;
    private initializeAddressManagement;
    private populateCountryDropdown;
    private populateBillingCountryDropdown;
    private handleCountryChange;
    private updateStateOptions;
    private updateFormLabels;
    private updateBillingFormLabels;
    private initializeAddressAutocomplete;
    private setupLazyAutocompleteLoading;
    private initializeGoogleMapsAutocomplete;
    private setupAutocomplete;
    private createAutocompleteInstance;
    private fillAddressFromAutocomplete;
    private parseAddressComponents;
    private setStateWithRetry;
    private autocompleteListenersAttached;
    private setupAutocompleteCountryChangeListeners;
    private initializeLocationFieldVisibility;
    private handleAddressInput;
    private handleBillingAddressInput;
    private hideLocationFields;
    private showLocationFields;
    private hideBillingLocationFields;
    private showBillingLocationFields;
    private initializeProspectCart;
    private initializePhoneInputs;
    private initializePhoneInput;
    private initializeCreditCard;
    private clearAllCheckoutFields;
    private handlePurchaseEvent;
    private buildOrderData;
    private createOrder;
    private createTestOrder;
    private getTestAttribution;
    private handleOrderRedirect;
    private getNextPageUrlFromMeta;
    private preserveQueryParams;
    private getCurrency;
    private getSuccessUrl;
    private validateExpressCheckoutFields;
    private getFailureUrl;
    private handleFormSubmit;
    private processOrder;
    private handleTokenizedPayment;
    private handleFieldChange;
    private updateBillingStateOptions;
    private getFieldNameFromElement;
    private getFieldByName;
    private handleBillingFieldChange;
    private handlePaymentMethodChange;
    private handleShippingMethodChange;
    private handleBillingAddressToggle;
    private setupAutofillDetection;
    private setupEventHandlers;
    private updateFormData;
    private clearError;
    private populateFormData;
    private handleTestDataFilled;
    private handleKonamiActivation;
    private handleCheckoutUpdate;
    private handleCartUpdate;
    private handleConfigUpdate;
    setSuccessUrl(url: string): void;
    setFailureUrl(url: string): void;
    private setOrCreateMetaTag;
    validateField(fieldName: string, value: any): {
        isValid: boolean;
        errorMessage?: string;
    };
    clearAllValidationErrors(): void;
    update(): void;
    protected cleanupEventListeners(): void;
    private displayPaymentError;
    private trackBeginCheckout;
    destroy(): void;
}
//# sourceMappingURL=CheckoutFormEnhancer.d.ts.map