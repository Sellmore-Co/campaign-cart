import { Logger } from '../../../utils/logger';
import { CartState } from '../../../types/global';
export declare class UIService {
    private form;
    private fields;
    private billingFields?;
    private logger;
    private errorManager;
    private eventManager;
    private floatingLabels;
    private periodicCheckInterval?;
    private loadingStates;
    private lastErrorsString;
    constructor(form: HTMLFormElement, fields: Map<string, HTMLElement>, logger: Logger, billingFields?: Map<string, HTMLElement>);
    initialize(): void;
    showLoading(section: string): void;
    hideLoading(section: string): void;
    updateProgress(step: number): void;
    displayErrors(errors: Record<string, string>, scrollToField?: string): void;
    focusFirstError(fieldName: string): void;
    updateFieldState(fieldName: string, state: 'valid' | 'invalid' | 'neutral'): void;
    handleCheckoutUpdate(state: any, displayErrors: (errors: Record<string, string>) => void): void;
    handleCartUpdate(cartState: CartState): void;
    updatePaymentFormVisibility(paymentMethod: string): void;
    private expandPaymentForm;
    private collapsePaymentForm;
    private clearPaymentFormErrors;
    private initializeFloatingLabels;
    setupFloatingLabel(field: HTMLInputElement | HTMLSelectElement, label?: HTMLLabelElement): void;
    private setupLabelStyles;
    private setupFieldStyles;
    private handleInput;
    private handleFocus;
    private handleBlur;
    private handleAutofill;
    private updateLabelState;
    private hasValue;
    private floatLabelUp;
    private floatLabelDown;
    private startPeriodicCheck;
    private checkAllFieldsForChanges;
    updateLabelsForPopulatedData(): void;
    handleResponsiveUI(): void;
    enhanceAccessibility(): void;
    destroy(): void;
}
//# sourceMappingURL=UIService.d.ts.map